#pragma once
#include <optional>
#include <string>
#include <array>

struct MaterialRecord {
  std::optional<uint8_t> shaderType;
  std::optional<std::string> inherits;
  std::optional<uint32_t> clamp;
  std::optional<std::array<float, 2>> uvOffset;
  std::optional<std::array<float, 2>> uvScale;
  std::optional<float> transparency;
  std::optional<bool> alphaBlend;
  std::optional<uint32_t> sourceBlendMode;
  std::optional<uint32_t> destinationBlendMode;
  std::optional<uint8_t> alphaTestThreshold;
  std::optional<bool> alphaTest;
  std::optional<bool> depthWrite;
  std::optional<bool> depthTest;
  std::optional<bool> ssr;
  std::optional<bool> wetnessControlSsr;
  std::optional<bool> decal;
  std::optional<bool> twoSided;
  std::optional<bool> decalNoFade;
  std::optional<bool> nonOccluder;
  std::optional<bool> refraction;
  std::optional<bool> refractionalFalloff;
  std::optional<float> refractionPower;
  std::optional<bool> envMapEnabled;
  std::optional<float> envMapMaskScale;
  std::optional<bool> depthBias;
  std::optional<bool> grayscaleToPaletteColor;
  std::optional<uint8_t> maskWrites;

  // BGSM specific fields
  std::optional<std::string> diffuseMap;
  std::optional<std::string> normalMap;
  std::optional<std::string> smoothSpecMap;
  std::optional<std::string> grayscaleMap;
  std::optional<std::string> glowMap;
  std::optional<std::string> wrinkleMap;
  std::optional<std::string> specularMap;
  std::optional<std::string> lightingMap;
  std::optional<std::string> flowMap;
  std::optional<std::string> distanceFieldAlphaMap;
  std::optional<std::string> envMap;
  std::optional<std::string> innerLayerMap;
  std::optional<std::string> displacementMap;
  std::optional<std::string> baseMap;
  std::optional<std::string> envMapMask;
  std::optional<bool> enableEditorAlphaThreshold;
  std::optional<bool> translucency;
  std::optional<bool> translucencyThickObject;
  std::optional<bool> translucencyMixAlbedoWithSubsurfaceColor;
  std::optional<std::array<uint8_t, 4>> translucencySubsurfaceColor;
  std::optional<float> translucencyTransmissiveScale;
  std::optional<float> translucencyTurbulence;
  std::optional<bool> rimLighting;
  std::optional<float> rimPower;
  std::optional<float> specularPower;
  std::optional<bool> subsurfaceLighting;
  std::optional<float> subsurfaceLightingRolloff;
  std::optional<bool> specularEnabled;
  std::optional<std::array<float, 3>> specularColor;
  std::optional<float> specularMult;
  std::optional<float> smoothness;
  std::optional<float> fresnelPower;
  std::optional<float> wetnessControlSpecScale;
  std::optional<float> wetnessControlSpecPowerScale;
  std::optional<float> wetnessControlSpecMinvar;
  std::optional<float> wetnessControlEnvMapScale;
  std::optional<float> wetnessControlFresnelPower;
  std::optional<float> wetnessControlMetalness;
  std::optional<bool> pbr;
  std::optional<bool> customPorosity;
  std::optional<float> porosityValue;
  std::optional<std::string> rootMaterialPath;
  std::optional<bool> anisoLighting;
  std::optional<bool> emitEnabled;
  std::optional<std::array<float, 4>> emitColor;
  std::optional<float> emitMult;
  std::optional<bool> modelSpaceNormals;
  std::optional<bool> externalEmit;
  std::optional<float> lumEmit;
  std::optional<bool> useAdaptiveEmissive;
  std::optional<std::array<float, 3>> adaptiveEmissiveExposureParams;
  std::optional<bool> backLighting;
  std::optional<bool> receiveShadows;
  std::optional<bool> hideSecret;
  std::optional<bool> castShadows;
  std::optional<bool> dissolveFade;
  std::optional<bool> assumeShadowmask;
  std::optional<bool> glowMapEnabled;
  std::optional<bool> envMapWindow;
  std::optional<bool> envMapEye;
  std::optional<bool> hair;
  std::optional<std::array<float, 3>> hairTintColor;
  std::optional<bool> tree;
  std::optional<bool> facegen;
  std::optional<bool> skinTint;
  std::optional<bool> tessellate;
  std::optional<std::array<float, 2>> displacementMapParams;
  std::optional<std::array<float, 3>> tessellationParams;
  std::optional<float> grayscaleToPaletteScale;
  std::optional<bool> skewSpecularAlpha;
  std::optional<bool> terrain;
  std::optional<std::array<float, 3>> terrainParams;

  // BGEM specific fields
  std::optional<bool> blood;
  std::optional<bool> effectLighting;
  std::optional<bool> falloff;
  std::optional<bool> falloffColor;
  std::optional<bool> grayscaleToPaletteAlpha;
  std::optional<bool> soft;
  std::optional<std::array<float, 3>> baseColor;
  std::optional<float> baseColorScale;
  std::optional<std::array<float, 4>> falloffParams;
  std::optional<float> lightingInfluence;
  std::optional<uint8_t> envMapMinLod;
  std::optional<float> softDepth;
  std::optional<bool> effectPbrSpecular;
};